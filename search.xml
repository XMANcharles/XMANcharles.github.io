<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>记录-现有Vue项目迁移到Nuxt-SSR</title>
    <url>/2019/10/30/%E8%AE%B0%E5%BD%95-%E7%8E%B0%E6%9C%89Vue%E9%A1%B9%E7%9B%AE%E8%BF%81%E7%A7%BB%E5%88%B0Nuxt-SSR/</url>
    <content><![CDATA[<h1 id="项目的前端用的Vue，跑了一年之后，终于迎来了SEO的难题，一番研究之后（主要我司的需求，很难做到纯HTML静态化），决定使用SSR，于是选择了Nuxt-js。"><a href="#项目的前端用的Vue，跑了一年之后，终于迎来了SEO的难题，一番研究之后（主要我司的需求，很难做到纯HTML静态化），决定使用SSR，于是选择了Nuxt-js。" class="headerlink" title="项目的前端用的Vue，跑了一年之后，终于迎来了SEO的难题，一番研究之后（主要我司的需求，很难做到纯HTML静态化），决定使用SSR，于是选择了Nuxt.js。"></a>项目的前端用的Vue，跑了一年之后，终于迎来了SEO的难题，一番研究之后（主要我司的需求，很难做到纯HTML静态化），决定使用SSR，于是选择了Nuxt.js。</h1><a id="more"></a>
<h2 id="迁移步骤"><a href="#迁移步骤" class="headerlink" title="迁移步骤"></a>迁移步骤</h2><pre><code>关于SSR，SEO在此就不赘婿了，这里仅仅把当时迁移的过程以及遇到的问题记录下来。</code></pre><h3 id="1、新建项目：Nuxt-SSR"><a href="#1、新建项目：Nuxt-SSR" class="headerlink" title="1、新建项目：Nuxt-SSR"></a>1、新建项目：Nuxt-SSR</h3><pre><code>直接使用官方的cli，一步一步默认build下去，保证最干净的环境就好。</code></pre><h3 id="2、拷贝老项目的src目录到新项目中的pages"><a href="#2、拷贝老项目的src目录到新项目中的pages" class="headerlink" title="2、拷贝老项目的src目录到新项目中的pages"></a>2、拷贝老项目的<code>src</code>目录到新项目中的<code>pages</code></h3><pre><code>Nuxt的Pages目录默认会自动生成router，下一步我们改用之前的router.js</code></pre><h3 id="3、改造router"><a href="#3、改造router" class="headerlink" title="3、改造router"></a>3、改造router</h3><ol>
<li>将router目录移动到assert目录下</li>
<li>安装<a href="https://github.com/nuxt-community/router-module" target="_blank" rel="noopener">nuxt-router</a><pre><code>npm install --save-dev @nuxtjs/router</code></pre><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//nuxt.config.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  buildModules: [</span><br><span class="line">    <span class="comment">// Simple usage</span></span><br><span class="line">    <span class="string">'@nuxtjs/router'</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// With options</span></span><br><span class="line">    [<span class="string">'@nuxtjs/router'</span>, &#123; </span><br><span class="line">      <span class="comment">/* module options */</span> </span><br><span class="line">      path: <span class="string">'assets/router'</span></span><br><span class="line">    &#125;]</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
router.js需要做一些改动<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//assets/router/router.js</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">'vue-router'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> MyPage <span class="keyword">from</span> <span class="string">'~/components/my-page'</span></span><br><span class="line">Vue.use(Router)</span><br><span class="line"><span class="comment">//这里主要就是变成了导出一个method</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">createRouter</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Router(&#123;</span><br><span class="line">      mode: <span class="string">'history'</span>,</span><br><span class="line">      routes: [</span><br><span class="line">        &#123;</span><br><span class="line">          path: <span class="string">'/'</span>,</span><br><span class="line">          component: MyPage</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="4、各种报错处理"><a href="#4、各种报错处理" class="headerlink" title="4、各种报错处理"></a>4、各种报错处理</h3><ol>
<li><p>window is undefined<br> 参照<a href="https://zh.nuxtjs.org/faq/window-document-undefined" target="_blank" rel="noopener">Window 或 Document 对象未定义</a>改造现有代码。</p>
</li>
<li><p>postcss，按照自己项目的要求配置一下，其中cssnano可能需要注意一下。</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//nuxt.config.js</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  ** Build configuration</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  build: &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Css文件的//注释，加此插件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    postcss: &#123;</span><br><span class="line">      <span class="comment">// 添加插件名称作为键，参数作为值</span></span><br><span class="line">      <span class="comment">// 使用npm或yarn安装它们</span></span><br><span class="line">      <span class="comment">// parser: 'sugarss',</span></span><br><span class="line">      plugins: &#123;</span><br><span class="line">        <span class="comment">// 可以通过传递 false 来禁用插件</span></span><br><span class="line">        <span class="string">"postcss-import"</span>: &#123;&#125;,</span><br><span class="line">        <span class="string">"postcss-url"</span>: &#123;&#125;,</span><br><span class="line">        <span class="string">'postcss-nested'</span>: &#123;&#125;,</span><br><span class="line">        <span class="string">'postcss-responsive-type'</span>: &#123;&#125;,</span><br><span class="line">        <span class="string">'postcss-hexrgba'</span>: &#123;&#125;,</span><br><span class="line">        <span class="comment">//解决CSS单行注释的问题！！！这个我当时直接copy的原项目postcssrc.js,结果怎么着都报css的单行注释的symbol错，后来上github一看，用这个压缩一下就好了</span></span><br><span class="line">        <span class="string">'cssnano'</span>: &#123;&#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      preset: &#123;</span><br><span class="line">        <span class="comment">// 更改postcss-preset-env 设置</span></span><br><span class="line">        <span class="comment">/*autoprefixer: &#123;</span></span><br><span class="line"><span class="comment">          grid: true</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    ** You can extend webpack config here</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    extend(config, &#123;isDev, isClient&#125;) &#123;</span><br><span class="line">      <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>vuex，移动store文件到nuxt的store中。</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//store/index.js</span></span><br><span class="line"><span class="comment">//这里使用的Classic模式，怕项目其他地方报错，这样就不需要改造其他module了。</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">    <span class="comment">//State需要导出function，记得检查其他module定义</span></span><br><span class="line">    state: <span class="function"><span class="params">()</span> =&gt;</span> (&#123;</span><br><span class="line">      </span><br><span class="line">    &#125;),</span><br><span class="line">    modules: &#123;</span><br><span class="line">      </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
<li><p>确认运行不报错之后，开始迁移pages下的js，css等文件到对应的Nuxt目录，assets对应会编译的js，less文件，static对应无须编译的js，css文件，具体可以参阅<a href="https://zh.nuxtjs.org/guide/directory-structure" target="_blank" rel="noopener">Nuxt文档</a>。</p>
<pre><code>上一步的router其实就在迁移文件，这里把所有的文件迁移完了之后，页面可能会报错（找不到Js什么的），这里按照官网的方式以```@/assert/xxx/xxx.js```来改造之前的js引用。</code></pre></li>
<li><p>第三方插件vue-Swiper，iView，v-lazy…<br> 这里以vue-Swiper举例，在plugins目录下新建nuxt-swiper.js</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> VueAwesomeSwiper <span class="keyword">from</span> <span class="string">'vue-awesome-swiper/dist/ssr'</span></span><br><span class="line"></span><br><span class="line">Vue.use(VueAwesomeSwiper);</span><br></pre></td></tr></table></figure>
<p>然后在nuxt.config.js中配置</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">plugins: [</span><br><span class="line">     <span class="comment">//ssr:true还是flase取决于这个插件需不需要在服务端渲染</span></span><br><span class="line">    &#123;<span class="attr">src</span>: <span class="string">"~/plugins/nuxt-swiper.js"</span>, <span class="attr">ssr</span>: <span class="literal">false</span>&#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 我这里Swiper必须在客户端渲染，否则分页出不来，也不能切换--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">client-only</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!-- 从组件的形式改成这种方式--&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-swiper:mySwiper</span>=<span class="string">"swiper"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"swiper-wrapper"</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"swiper-slide"</span> <span class="attr">v-for</span>=<span class="string">"(e, i) in array"</span> <span class="attr">:key</span>=<span class="string">"index"</span> &gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">p</span>&gt;</span>e<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"swiper-pagination swiper-pagination-bullets"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">client-only</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>Dev跨域<br> 参照<a href="https://zh.nuxtjs.org/faq/http-proxy" target="_blank" rel="noopener">如何发起跨域资源请求？</a></p>
</li>
<li><p>之前原有项目的模板是index.html,Nuxt这边需要改成app.html,具体可以参照<a href="https://zh.nuxtjs.org/guide/views#%E6%A8%A1%E6%9D%BF" target="_blank" rel="noopener">视图-模板</a>要求书写</p>
</li>
</ol>
<p>至此，差不多迁移完毕。。。。</p>
]]></content>
      <categories>
        <category>web前端</category>
      </categories>
      <tags>
        <tag>nuxt</tag>
        <tag>vue</tag>
      </tags>
  </entry>
</search>
